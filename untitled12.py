# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vNdB_1HS_qnOCTFsf__S6GVkNHcLSj7L
"""

import numpy as np
import pandas as pd

match=pd.read_csv('matches.csv')
delivery=pd.read_csv('deliveries.csv')

match.head()

match.shape

delivery.head()

delivery.shape

total_score_df=delivery.groupby(['match_id','inning']).sum()['total_runs'].reset_index()

total_score_df

total_score_df=total_score_df[total_score_df['inning']==1]

total_score_df

match_df=match.merge(total_score_df[['match_id','total_runs']],left_on='id',right_on='match_id')

match_df

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Delhi Capitals'
]

match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

match_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match_df = match_df[match_df['team1'].isin(teams)]
match_df = match_df[match_df['team2'].isin(teams)]

match_df.shape

match_df=match_df[match_df['dl_applied']==0]

match_df=match_df[['match_id','city','winner','total_runs']]

delivery_df=match_df.merge(delivery,on='match_id')

delivery_df=delivery_df[delivery_df['inning']==2]

delivery_df

# Ensure 'total_runs_y' is numeric before calculating cumsum
# Ensure 'total_runs_y' is numeric before calculating cumsum
# Use errors='coerce' to turn any non-numeric values into NaN
delivery_df['total_runs_y'] = pd.to_numeric(delivery_df['total_runs_y'], errors='coerce')

# Check the dtype after conversion
print(delivery_df['total_runs_y'].dtype)

# Drop rows with NaN values if any were introduced by errors='coerce'
delivery_df.dropna(subset=['total_runs_y'], inplace=True)

# Convert to integer type if appropriate after ensuring all values are numeric
delivery_df['total_runs_y'] = delivery_df['total_runs_y'].astype(int)

delivery_df['current_score']=delivery_df.groupby('match_id')['total_runs_y'].cumsum()

delivery_df

delivery_df['runs_left'] = delivery_df['total_runs_x'] - delivery_df['current_score']

delivery_df

delivery_df['balls_left'] = 126 - (delivery_df['over'] * 6 + delivery_df['ball'])

delivery_df['player_dismissed'] = delivery_df['player_dismissed'].notna().astype(int)

delivery_df

delivery_df['player_dismissed'] = delivery_df['player_dismissed'].notna().astype(int)



# crr = runs/overs
delivery_df['crr'] = (delivery_df['current_score']*6)/(120 - delivery_df['balls_left'])

delivery_df['rrr'] = (delivery_df['runs_left']*6)/delivery_df['balls_left']

def result(row):
    return 1 if row['batting_team'] == row['winner'] else 0

delivery_df['result'] = delivery_df.apply(result,axis=1)

final_df = delivery_df[['batting_team','bowling_team','city','runs_left','balls_left','total_runs_x','crr','rrr','result']]

final_df = final_df.sample(final_df.shape[0])

final_df.dropna(inplace=True)

final_df = final_df[final_df['balls_left'] != 0]

X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# Removed the 'sparse=False' argument as it's causing a TypeError
trf = ColumnTransformer([
    ('trf',OneHotEncoder(drop='first'),['batting_team','bowling_team','city'])
]
,remainder='passthrough')

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('step1',trf),
    ('step2',LogisticRegression(solver='liblinear'))
])

pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

import pickle
pickle.dump(pipe,open('pipe.pkl','wb'))

